{"version":3,"sources":["webpack:///./src/components/forecastcards.js","webpack:///./src/pages/forecast.js"],"names":["ForecastCards","props","setIcon","Iconfig","weather","hours","hourFormat","className","date","temperature","icon","color","size","animate","description","ForecastPage","state","allForecasts","componentDidMount","ForecastData","then","data","flist","list","map","forecast","Date","dt","day","getDate","getMonth","getHours","main","toFarenheit","temp","setState","render","forecasts","this","key","React","Component"],"mappings":"wKA6CeA,EAzCO,SAAAC,GAGlB,IAAIC,EAAU,IAAIC,IAAQF,EAAMG,QAASH,EAAMI,MAAO,IAElDC,EAAaL,EAAMI,OAAS,GAAQJ,EAAMI,MAAQ,GAArC,MAAkDJ,EAAMI,MAAxD,MACjB,OAEI,yBAAKE,UAAU,2BAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,8BAAM,4BAAKN,EAAMO,MAAjB,IAA4B,2BAAIF,KAEpC,yBAAKC,UAAU,UACX,8BAAM,4BAAKN,EAAMQ,YAAX,QAId,yBAAKF,UAAU,OACX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CACIG,KAAMR,EAAQQ,KACdC,MAAOT,EAAQS,MACfC,KAAMV,EAAQU,KACdC,QAASX,EAAQW,WAIzB,yBAAKN,UAAU,gBACX,2BAAIN,EAAMG,SACV,2BAAIH,EAAMa,iB,gBC9BxBC,E,oBAEF,aAAe,IAAD,SACV,sBACKC,MAAQ,CACTC,aAAc,IAHR,E,kHAOdC,kBAAA,WAAqB,IAAD,OAChBC,eAAaC,MAAK,SAAAC,GACd,IAAIC,EAAQD,EAAKE,KAAKC,KAAI,SAAAC,GAEtB,IAAMjB,EAAO,IAAIkB,KAAmB,IAAdD,EAASE,IAEzBC,EAAMpB,EAAKqB,UAIjB,MAAO,CACHrB,KANW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAExEA,EAAKsB,YAIlB,KAAeF,EAAOvB,MAHhBG,EAAKuB,WAIf3B,QAASqB,EAASrB,QAAQ,GAAG4B,KAC7BlB,YAAaW,EAASrB,QAAQ,GAAGU,YACjCL,YAAawB,sBAAYR,EAASO,KAAKE,UAI/C,EAAKC,SAAS,CAAElB,aAAcK,Q,EAKtCc,OAAA,WACI,IAAMC,EAAYC,KAAKtB,MAAMC,aAAaO,KAAI,SAAAC,GAAQ,OAClD,kBAAC,EAAD,CACIc,IAAQd,EAASjB,KAAd,IAAsBiB,EAASpB,MAClCG,KAAMiB,EAASjB,KACfH,MAAOoB,EAASpB,MAChBD,QAASqB,EAASrB,QAClBU,YAAaW,EAASX,YACtBL,YAAagB,EAAShB,iBAG9B,OACI,kBAAC,IAAD,KACI,yBAAKF,UAAU,OACV8B,K,GA9CMG,IAAMC,WAsDlB1B","file":"component---src-pages-forecast-js-b2ceaf9a07ba9119ac5d.js","sourcesContent":["import React from 'react'\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\nimport Iconfig from './iconfig'\r\n\r\nconst ForecastCards = props => {\r\n\r\n    //Set Icon Params\r\n    let setIcon = new Iconfig(props.weather, props.hours, 50)\r\n    //Format time to AM/PM\r\n    let hourFormat = props.hours >= 12 ? `${props.hours - 12} PM` : `${props.hours} AM`\r\n    return (\r\n\r\n        <div className=\"card-panel col s6 m4 l3\">\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <span><h5>{props.date}</h5> <p>{hourFormat}</p></span>\r\n                </div>\r\n                <div className=\"col s6\">\r\n                    <span><h4>{props.temperature}Â°</h4></span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col s4 m3 l3\">\r\n                    <ReactAnimatedWeather\r\n                        icon={setIcon.icon}\r\n                        color={setIcon.color}\r\n                        size={setIcon.size}\r\n                        animate={setIcon.animate}\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"col s8 m9 l9\">\r\n                    <p>{props.weather}</p>\r\n                    <p>{props.description}</p>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ForecastCards\r\n","import React from 'react'\r\nimport Layout from '../components/layout'\r\nimport ForecastCards from '../components/forecastcards'\r\nimport { ForecastData, toFarenheit } from '../API/weather'\r\n\r\nclass ForecastPage extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            allForecasts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        ForecastData.then(data => {\r\n            let flist = data.list.map(forecast => {\r\n                //Determine day and hours\r\n                const date = new Date(forecast.dt * 1000)\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n                const day = date.getDate()\r\n                const month = months[date.getMonth()]\r\n                const hours = date.getHours()\r\n                //Create list of forecasts\r\n                return {\r\n                    date: `${month}, ${day}`, hours,\r\n                    weather: forecast.weather[0].main,\r\n                    description: forecast.weather[0].description,\r\n                    temperature: toFarenheit(forecast.main.temp)\r\n                }\r\n            })\r\n            //Set list of forecasts to state\r\n            this.setState({ allForecasts: flist })\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const forecasts = this.state.allForecasts.map(forecast =>\r\n            <ForecastCards\r\n                key={`${forecast.date}:${forecast.hours}`}\r\n                date={forecast.date}\r\n                hours={forecast.hours}\r\n                weather={forecast.weather}\r\n                description={forecast.description}\r\n                temperature={forecast.temperature}\r\n            />\r\n        )\r\n        return (\r\n            <Layout>\r\n                <div className=\"row\">\r\n                    {forecasts}\r\n                </div>\r\n\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForecastPage\r\n"],"sourceRoot":""}